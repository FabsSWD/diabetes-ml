### Bloque de Código 1: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Importa las bibliotecas y paquetes necesarios para el modelo de machine learning.

### Bloque de Código 1: Código ###
from IPython.display import IFrame

# Insertar un PDF usando un IFrame
file_path = "Proyecto.pdf" 
IFrame(file_path, width=900, height=700)

### Bloque de Código 2: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Importa las bibliotecas y paquetes necesarios para el modelo de machine learning.

### Bloque de Código 2: Código ###
# Importar las bibliotecas necesarias
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import confusion_matrix
from sklearn.decomposition import PCA
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from sklearn.svm import SVC

### Bloque de Código 3: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Carga el conjunto de datos desde un archivo CSV a un DataFrame para su análisis y modelado.

### Bloque de Código 3: Código ###
# Cargar el dataset
doc = "diabetes.csv"
df = pd.read_csv(doc)

### Bloque de Código 4: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 4: Código ###
# Mostrar las primeras filas del dataset
print(df.head())

### Bloque de Código 5: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 5: Código ###
# Descripción estadística básica
print(df.describe())

### Bloque de Código 6: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 6: Código ###
# Evaluar las columnas
print(df.columns)

### Bloque de Código 7: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 7: Código ###
# Listado de columnas que no deberían tener ceros
columns_with_zeros = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']

# Reemplazar valores 0 con NaN en las columnas relevantes
for column in columns_with_zeros:
    df[column] = df[column].mask(df[column] == 0)


### Bloque de Código 8: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 8: Código ###
# Verificar valores faltantes después de reemplazar ceros
missing_values_after_replacement = df.isnull().sum()
print("Valores faltantes después del reemplazo de ceros:")
print(missing_values_after_replacement)

### Bloque de Código 9: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 9: Código ###
# Visualizar la distribución de las clases en la columna 'Outcome'
plt.figure(figsize=(8, 6))
sns.countplot(x='Outcome', data=df)
plt.title("Distribución de las clases en 'Outcome' (0: No diabetes, 1: Diabetes)")
plt.xlabel("Clase (Outcome)")
plt.ylabel("Cantidad")
plt.show()

### Bloque de Código 10: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 10: Código ###
# Gráfico de pares para visualizar la relación entre características y Outcomes
sns.pairplot(df, hue="Outcome")
plt.show()

### Bloque de Código 11: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 11: Código ###
# Boxplot para analizar la variabilidad
plt.figure(figsize=(12,6))
sns.boxplot(data=df)
plt.title("Boxplot de las características del dataset Iris")
plt.show()

### Bloque de Código 12: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 12: Código ###
# Crear el mapa de calor para la matriz de correlación
plt.figure(figsize=(8,6))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm")
plt.title("Matriz de correlación entre características numéricas")
plt.show()

### Bloque de Código 13: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 13: Código ###
# Preprocesamiento: escalamiento de las características
features = df.drop(columns='Outcome')  
features = features.fillna(features.mean())  # Imputación de valores faltantes
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

# Aplicar PCA sin reducir el número de componentes (se obtienen todas las componentes)
pca = PCA()
pca.fit(scaled_features)

# Varianza explicada por cada componente
explained_variance_ratio = pca.explained_variance_ratio_
cumulative_explained_variance = np.cumsum(explained_variance_ratio)

# Graficar la varianza explicada acumulada
plt.figure(figsize=(8, 6))
plt.plot(range(1, len(cumulative_explained_variance)+1), cumulative_explained_variance, marker='o', linestyle='--')
plt.xlabel('Número de Componentes Principales')
plt.ylabel('Varianza Explicada Acumulada')
plt.title('Varianza Explicada Acumulada por Componentes Principales')
plt.grid(True)
plt.show()


### Bloque de Código 14: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 14: Código ###
# Preprocesamiento: escalamiento de las características
features = df.drop(columns='Outcome')  
features = features.fillna(features.mean())  # Imputación de valores faltantes
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

### Bloque de Código 15: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 15: Código ###
# Aplicar PCA con 4 componentes principales
pca_4 = PCA(n_components=4)
pca_4_components = pca_4.fit_transform(scaled_features)

### Bloque de Código 16: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 16: Código ###
# Varianza explicada por las 4 componentes principales
explained_variance_ratio_4 = pca_4.explained_variance_ratio_

### Bloque de Código 17: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 17: Código ###
# Mostrar la varianza explicada por cada componente y la suma total
print("Varianza explicada por cada componente:")
print(explained_variance_ratio_4)
print("Suma de varianza explicada por las 4 componentes:", np.sum(explained_variance_ratio_4))

### Bloque de Código 18: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 18: Código ###
# Gráfico de barras para mostrar la varianza explicada por cada componente
plt.figure(figsize=(8, 6))
plt.bar(range(1, 5), explained_variance_ratio_4, tick_label=["PC1", "PC2", "PC3", "PC4"])
plt.xlabel('Componentes Principales')
plt.ylabel('Varianza Explicada')
plt.title('Varianza Explicada por Cada Componente Principal')
plt.show(

### Bloque de Código 19: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 19: Código ###
# Crear una figura en 3D
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')

# Graficar las primeras tres componentes principales
scatter = ax.scatter(pca_4_components[:, 0], pca_4_components[:, 1], pca_4_components[:, 2],
                     c=pca_4_components[:, 3], cmap='viridis', s=60)

# Etiquetas de los ejes
ax.set_xlabel('PC1')
ax.set_ylabel('PC2')
ax.set_zlabel('PC3')

# Agregar una barra de colores para la cuarta componente
cbar = fig.colorbar(scatter, ax=ax, pad=0.1)
cbar.set_label('PC4')

plt.title('PCA con 4 Componentes Principales (PC1, PC2, PC3 y PC4)')
plt.show()


### Bloque de Código 20: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 20: Código ###
# Preprocesamiento: escalamiento de las características
features = df.drop(columns='Outcome')  
features = features.fillna(features.mean())  # Imputación de valores faltantes
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

### Bloque de Código 21: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 21: Código ###
# Aplicar PCA con 4 componentes principales
pca_4 = PCA(n_components=4)
pca_4.fit(scaled_features)
pca_features = pca.fit_transform(scaled_features)

### Bloque de Código 22: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 22: Código ###
# Obtener la matriz de cargas
loadings = pd.DataFrame(pca_4.components_.T, columns=['PC1', 'PC2', 'PC3', 'PC4'], index=features.columns)

### Bloque de Código 23: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 23: Código ###
# Mostrar las cargas de cada característica en los 4 componentes principales
print(loadings)

### Bloque de Código 24: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 24: Código ###
# Preprocesamiento: escalamiento de las características
features = df.drop(columns='Outcome')  
labels = df['Outcome']  # Esta es la variable objetivo
features = features.fillna(features.mean())  # Imputar valores faltantes con la media

### Bloque de Código 25: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Divide el conjunto de datos en conjuntos de entrenamiento y prueba para evaluar el rendimiento del modelo.

### Bloque de Código 25: Código ###
# Dividir en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(pca_features, labels, test_size=0.2, random_state=42)

### Bloque de Código 26: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Entrena el modelo de machine learning utilizando los datos de entrenamiento.

### Bloque de Código 26: Código ###
# Entrenar un modelo de Regresión Logística
model = LogisticRegression()
model.fit(X_train, y_train)

### Bloque de Código 27: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 27: Código ###
# Predecir en el conjunto de prueba
y_pred = model.predict(X_test)

### Bloque de Código 28: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Evalúa la precisión del modelo comparando las predicciones con los valores reales.

### Bloque de Código 28: Código ###
# Evaluar el modelo
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

### Bloque de Código 29: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 29: Código ###
print(f'Accuracy: {accuracy}')
print('Classification Report:')
print(report)

### Bloque de Código 30: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Importa las bibliotecas y paquetes necesarios para el modelo de machine learning.

### Bloque de Código 30: Código ###
from sklearn.ensemble import RandomForestClassifier

# Entrenar un modelo de Random Forest
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)


### Bloque de Código 31: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 31: Código ###
# Predecir en el conjunto de prueba
y_pred = model.predict(X_test)

### Bloque de Código 32: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Evalúa la precisión del modelo comparando las predicciones con los valores reales.

### Bloque de Código 32: Código ###
# Evaluar el modelo
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

### Bloque de Código 33: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 33: Código ###
print(f'Accuracy: {accuracy}')
print('Classification Report:')
print(report)

### Bloque de Código 34: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Entrena el modelo de machine learning utilizando los datos de entrenamiento.

### Bloque de Código 34: Código ###
# Entrenar un modelo de Support Vector Machine (SVM)
model = SVC(kernel='linear', random_state=42)
model.fit(X_train, y_train)

### Bloque de Código 35: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 35: Código ###
# Predecir en el conjunto de prueba
y_pred = model.predict(X_test)

### Bloque de Código 36: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Evalúa la precisión del modelo comparando las predicciones con los valores reales.

### Bloque de Código 36: Código ###
# Evaluar el modelo
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

### Bloque de Código 37: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 37: Código ###
print(f'Accuracy: {accuracy}')
print('Classification Report:')
print(report)

### Bloque de Código 38: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Entrena el modelo de machine learning utilizando los datos de entrenamiento.

### Bloque de Código 38: Código ###
model = SVC(kernel='rbf', random_state=42)
model.fit(X_train, y_train)

### Bloque de Código 39: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 39: Código ###
report = classification_report(y_test, y_pred)

### Bloque de Código 40: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Evalúa la precisión del modelo comparando las predicciones con los valores reales.

### Bloque de Código 40: Código ###
# Evaluar el modelo
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

### Bloque de Código 41: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 41: Código ###
print(f'Accuracy: {accuracy}')
print('Classification Report:')
print(report)

### Bloque de Código 42: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Divide el conjunto de datos en conjuntos de entrenamiento y prueba para evaluar el rendimiento del modelo.

### Bloque de Código 42: Código ###
# Dividir los datos en entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(pca_features, labels, test_size=0.2, random_state=42)

# Entrenar el modelo de Regresión Logística
model_logistic = LogisticRegression()
model_logistic.fit(X_train, y_train)

# Entrenar el modelo de Random Forest
model_rf = RandomForestClassifier(random_state=42)
model_rf.fit(X_train, y_train)

# Entrenar el modelo SVM
model_svm = SVC(kernel='linear', random_state=42)
model_svm.fit(X_train, y_train)


### Bloque de Código 43: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Evalúa la precisión del modelo comparando las predicciones con los valores reales.

### Bloque de Código 43: Código ###
# Los valores de prediccion
input_data = np.array([[10,	168,	74,	0	,0	,38,	0.537,	34]])

# Preprocesar el input_data
scaled_input = scaler.transform(input_data)  # Escalar usando el mismo scaler

# Aplicar PCA
pca_input = pca.transform(scaled_input)  # Aplicar el mismo PCA

# Hacer las predicciones y calcular la precisión
logistic_pred = model_logistic.predict(pca_input)
logistic_accuracy = accuracy_score(y_test, model_logistic.predict(X_test))  # Accuracy en el conjunto de prueba

rf_pred = model_rf.predict(pca_input)
rf_accuracy = accuracy_score(y_test, model_rf.predict(X_test))  # Accuracy en el conjunto de prueba

svm_pred = model_svm.predict(pca_input)
svm_accuracy = accuracy_score(y_test, model_svm.predict(X_test))  # Accuracy en el conjunto de prueba

nb_pred = model_nb.predict(pca_input)
nb_accuracy = accuracy_score(y_test, model_nb.predict(X_test))

mlp_pred = model_mlp.predict(pca_input)
mlp_accuracy = accuracy_score(y_test, model_mlp.predict(X_test))

# Crear la tabla con las predicciones y la precisión de todos los modelos
results = pd.DataFrame({
    'Modelo': ['Regresión Logística', 'Random Forest', 'SVM', 'Naive Bayes', 'Redes Neuronales (MLP)'],
    'Predicción': [
        'Tiene diabetes' if logistic_pred[0] == 1 else 'No tiene diabetes',
        'Tiene diabetes' if rf_pred[0] == 1 else 'No tiene diabetes',
        'Tiene diabetes' if svm_pred[0] == 1 else 'No tiene diabetes',
        'Tiene diabetes' if nb_pred[0] == 1 else 'No tiene diabetes',
        'Tiene diabetes' if mlp_pred[0] == 1 else 'No tiene diabetes'
    ],
    'Precisión (%)': [
        logistic_accuracy * 100,
        rf_accuracy * 100,
        svm_accuracy * 100,
        nb_accuracy * 100,
        mlp_accuracy * 100
    ]
})

# Mostrar la tabla
print(results)

### Bloque de Código 44: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 44: Código ###
results

### Bloque de Código 45: Descripción ###
Este bloque de código realiza las siguientes tareas:
- Otras operaciones como preprocesamiento de datos, selección de características o evaluación del modelo.

### Bloque de Código 45: Código ###


